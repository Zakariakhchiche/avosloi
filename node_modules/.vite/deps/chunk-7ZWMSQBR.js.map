{
  "version": 3,
  "sources": ["../../langchain/dist/chains/base.js"],
  "sourcesContent": ["import { RUN_KEY } from \"../schema/index.js\";\r\nimport { CallbackManager, parseCallbackConfigArg, } from \"../callbacks/manager.js\";\r\nimport { BaseLangChain } from \"../base_language/index.js\";\r\n/**\r\n * Base interface that all chains must implement.\r\n */\r\nexport class BaseChain extends BaseLangChain {\r\n    get lc_namespace() {\r\n        return [\"langchain\", \"chains\", this._chainType()];\r\n    }\r\n    constructor(fields, \r\n    /** @deprecated */\r\n    verbose, \r\n    /** @deprecated */\r\n    callbacks) {\r\n        if (arguments.length === 1 &&\r\n            typeof fields === \"object\" &&\r\n            !(\"saveContext\" in fields)) {\r\n            // fields is not a BaseMemory\r\n            const { memory, callbackManager, ...rest } = fields;\r\n            super({ ...rest, callbacks: callbackManager ?? rest.callbacks });\r\n            this.memory = memory;\r\n        }\r\n        else {\r\n            // fields is a BaseMemory\r\n            super({ verbose, callbacks });\r\n            this.memory = fields;\r\n        }\r\n    }\r\n    /** @ignore */\r\n    _selectMemoryInputs(values) {\r\n        const valuesForMemory = { ...values };\r\n        if (\"signal\" in valuesForMemory) {\r\n            delete valuesForMemory.signal;\r\n        }\r\n        if (\"timeout\" in valuesForMemory) {\r\n            delete valuesForMemory.timeout;\r\n        }\r\n        return valuesForMemory;\r\n    }\r\n    /**\r\n     * Invoke the chain with the provided input and returns the output.\r\n     * @param input Input values for the chain run.\r\n     * @param config Optional configuration for the Runnable.\r\n     * @returns Promise that resolves with the output of the chain run.\r\n     */\r\n    async invoke(input, config) {\r\n        return this.call(input, config);\r\n    }\r\n    /**\r\n     * Return a json-like object representing this chain.\r\n     */\r\n    serialize() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    async run(\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    input, config) {\r\n        const inputKeys = this.inputKeys.filter((k) => !this.memory?.memoryKeys.includes(k) ?? true);\r\n        const isKeylessInput = inputKeys.length <= 1;\r\n        if (!isKeylessInput) {\r\n            throw new Error(`Chain ${this._chainType()} expects multiple inputs, cannot use 'run' `);\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        const values = inputKeys.length ? { [inputKeys[0]]: input } : {};\r\n        const returnValues = await this.call(values, config);\r\n        const keys = Object.keys(returnValues);\r\n        if (keys.length === 1) {\r\n            return returnValues[keys[0]];\r\n        }\r\n        throw new Error(\"return values have multiple keys, `run` only supported when one key currently\");\r\n    }\r\n    async _formatValues(values) {\r\n        const fullValues = { ...values };\r\n        if (fullValues.timeout && !fullValues.signal) {\r\n            fullValues.signal = AbortSignal.timeout(fullValues.timeout);\r\n            delete fullValues.timeout;\r\n        }\r\n        if (!(this.memory == null)) {\r\n            const newValues = await this.memory.loadMemoryVariables(this._selectMemoryInputs(values));\r\n            for (const [key, value] of Object.entries(newValues)) {\r\n                fullValues[key] = value;\r\n            }\r\n        }\r\n        return fullValues;\r\n    }\r\n    /**\r\n     * Run the core logic of this chain and add to output if desired.\r\n     *\r\n     * Wraps _call and handles memory.\r\n     */\r\n    async call(values, config, \r\n    /** @deprecated */\r\n    tags) {\r\n        const fullValues = await this._formatValues(values);\r\n        const parsedConfig = parseCallbackConfigArg(config);\r\n        const callbackManager_ = await CallbackManager.configure(parsedConfig.callbacks, this.callbacks, parsedConfig.tags || tags, this.tags, parsedConfig.metadata, this.metadata, { verbose: this.verbose });\r\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), fullValues);\r\n        let outputValues;\r\n        try {\r\n            outputValues = await (values.signal\r\n                ? Promise.race([\r\n                    this._call(fullValues, runManager),\r\n                    new Promise((_, reject) => {\r\n                        values.signal?.addEventListener(\"abort\", () => {\r\n                            reject(new Error(\"AbortError\"));\r\n                        });\r\n                    }),\r\n                ])\r\n                : this._call(fullValues, runManager));\r\n        }\r\n        catch (e) {\r\n            await runManager?.handleChainError(e);\r\n            throw e;\r\n        }\r\n        if (!(this.memory == null)) {\r\n            await this.memory.saveContext(this._selectMemoryInputs(values), outputValues);\r\n        }\r\n        await runManager?.handleChainEnd(outputValues);\r\n        // add the runManager's currentRunId to the outputValues\r\n        Object.defineProperty(outputValues, RUN_KEY, {\r\n            value: runManager ? { runId: runManager?.runId } : undefined,\r\n            configurable: true,\r\n        });\r\n        return outputValues;\r\n    }\r\n    /**\r\n     * Call the chain on all inputs in the list\r\n     */\r\n    async apply(inputs, config) {\r\n        return Promise.all(inputs.map(async (i, idx) => this.call(i, config?.[idx])));\r\n    }\r\n    /**\r\n     * Load a chain from a json-like object describing it.\r\n     */\r\n    static async deserialize(data, values = {}) {\r\n        switch (data._type) {\r\n            case \"llm_chain\": {\r\n                const { LLMChain } = await import(\"./llm_chain.js\");\r\n                return LLMChain.deserialize(data);\r\n            }\r\n            case \"sequential_chain\": {\r\n                const { SequentialChain } = await import(\"./sequential_chain.js\");\r\n                return SequentialChain.deserialize(data);\r\n            }\r\n            case \"simple_sequential_chain\": {\r\n                const { SimpleSequentialChain } = await import(\"./sequential_chain.js\");\r\n                return SimpleSequentialChain.deserialize(data);\r\n            }\r\n            case \"stuff_documents_chain\": {\r\n                const { StuffDocumentsChain } = await import(\"./combine_docs_chain.js\");\r\n                return StuffDocumentsChain.deserialize(data);\r\n            }\r\n            case \"map_reduce_documents_chain\": {\r\n                const { MapReduceDocumentsChain } = await import(\"./combine_docs_chain.js\");\r\n                return MapReduceDocumentsChain.deserialize(data);\r\n            }\r\n            case \"refine_documents_chain\": {\r\n                const { RefineDocumentsChain } = await import(\"./combine_docs_chain.js\");\r\n                return RefineDocumentsChain.deserialize(data);\r\n            }\r\n            case \"vector_db_qa\": {\r\n                const { VectorDBQAChain } = await import(\"./vector_db_qa.js\");\r\n                return VectorDBQAChain.deserialize(data, values);\r\n            }\r\n            case \"api_chain\": {\r\n                const { APIChain } = await import(\"./api/api_chain.js\");\r\n                return APIChain.deserialize(data);\r\n            }\r\n            default:\r\n                throw new Error(`Invalid prompt type in config: ${data._type}`);\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
