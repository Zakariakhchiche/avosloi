{
  "version": 3,
  "sources": ["../../langchain/dist/prompts/selectors/conditional.js", "../../langchain/dist/prompts/selectors/LengthBasedExampleSelector.js", "../../langchain/dist/prompts/selectors/SemanticSimilarityExampleSelector.js", "../../langchain/dist/prompts/pipeline.js"],
  "sourcesContent": ["/**\r\n * Abstract class that defines the interface for selecting a prompt for a\r\n * given language model.\r\n */\r\nexport class BasePromptSelector {\r\n    /**\r\n     * Asynchronous version of `getPrompt` that also accepts an options object\r\n     * for partial variables.\r\n     * @param llm The language model for which to get a prompt.\r\n     * @param options Optional object for partial variables.\r\n     * @returns A Promise that resolves to a prompt template.\r\n     */\r\n    async getPromptAsync(llm, options) {\r\n        const prompt = this.getPrompt(llm);\r\n        return prompt.partial(options?.partialVariables ?? {});\r\n    }\r\n}\r\n/**\r\n * Concrete implementation of `BasePromptSelector` that selects a prompt\r\n * based on a set of conditions. It has a default prompt that it returns\r\n * if none of the conditions are met.\r\n */\r\nexport class ConditionalPromptSelector extends BasePromptSelector {\r\n    constructor(default_prompt, conditionals = []) {\r\n        super();\r\n        Object.defineProperty(this, \"defaultPrompt\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"conditionals\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        this.defaultPrompt = default_prompt;\r\n        this.conditionals = conditionals;\r\n    }\r\n    /**\r\n     * Method that selects a prompt based on a set of conditions. If none of\r\n     * the conditions are met, it returns the default prompt.\r\n     * @param llm The language model for which to get a prompt.\r\n     * @returns A prompt template.\r\n     */\r\n    getPrompt(llm) {\r\n        for (const [condition, prompt] of this.conditionals) {\r\n            if (condition(llm)) {\r\n                return prompt;\r\n            }\r\n        }\r\n        return this.defaultPrompt;\r\n    }\r\n}\r\n/**\r\n * Type guard function that checks if a given language model is of type\r\n * `BaseLLM`.\r\n */\r\nexport function isLLM(llm) {\r\n    return llm._modelType() === \"base_llm\";\r\n}\r\n/**\r\n * Type guard function that checks if a given language model is of type\r\n * `BaseChatModel`.\r\n */\r\nexport function isChatModel(llm) {\r\n    return llm._modelType() === \"base_chat_model\";\r\n}\r\n", "import { BaseExampleSelector } from \"../base.js\";\r\n/**\r\n * Calculates the length of a text based on the number of words and lines.\r\n */\r\nfunction getLengthBased(text) {\r\n    return text.split(/\\n| /).length;\r\n}\r\n/**\r\n * A specialized example selector that selects examples based on their\r\n * length, ensuring that the total length of the selected examples does\r\n * not exceed a specified maximum length.\r\n */\r\nexport class LengthBasedExampleSelector extends BaseExampleSelector {\r\n    constructor(data) {\r\n        super(data);\r\n        Object.defineProperty(this, \"examples\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: []\r\n        });\r\n        Object.defineProperty(this, \"examplePrompt\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"getTextLength\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: getLengthBased\r\n        });\r\n        Object.defineProperty(this, \"maxLength\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 2048\r\n        });\r\n        Object.defineProperty(this, \"exampleTextLengths\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: []\r\n        });\r\n        this.examplePrompt = data.examplePrompt;\r\n        this.maxLength = data.maxLength ?? 2048;\r\n        this.getTextLength = data.getTextLength ?? getLengthBased;\r\n    }\r\n    /**\r\n     * Adds an example to the list of examples and calculates its length.\r\n     * @param example The example to be added.\r\n     * @returns Promise that resolves when the example has been added and its length calculated.\r\n     */\r\n    async addExample(example) {\r\n        this.examples.push(example);\r\n        const stringExample = await this.examplePrompt.format(example);\r\n        this.exampleTextLengths.push(this.getTextLength(stringExample));\r\n    }\r\n    /**\r\n     * Calculates the lengths of the examples.\r\n     * @param v Array of lengths of the examples.\r\n     * @param values Instance of LengthBasedExampleSelector.\r\n     * @returns Promise that resolves with an array of lengths of the examples.\r\n     */\r\n    async calculateExampleTextLengths(v, values) {\r\n        if (v.length > 0) {\r\n            return v;\r\n        }\r\n        const { examples, examplePrompt } = values;\r\n        const stringExamples = await Promise.all(examples.map((eg) => examplePrompt.format(eg)));\r\n        return stringExamples.map((eg) => this.getTextLength(eg));\r\n    }\r\n    /**\r\n     * Selects examples until the total length of the selected examples\r\n     * reaches the maxLength.\r\n     * @param inputVariables The input variables for the examples.\r\n     * @returns Promise that resolves with an array of selected examples.\r\n     */\r\n    async selectExamples(inputVariables) {\r\n        const inputs = Object.values(inputVariables).join(\" \");\r\n        let remainingLength = this.maxLength - this.getTextLength(inputs);\r\n        let i = 0;\r\n        const examples = [];\r\n        while (remainingLength > 0 && i < this.examples.length) {\r\n            const newLength = remainingLength - this.exampleTextLengths[i];\r\n            if (newLength < 0) {\r\n                break;\r\n            }\r\n            else {\r\n                examples.push(this.examples[i]);\r\n                remainingLength = newLength;\r\n            }\r\n            i += 1;\r\n        }\r\n        return examples;\r\n    }\r\n    /**\r\n     * Creates a new instance of LengthBasedExampleSelector and adds a list of\r\n     * examples to it.\r\n     * @param examples Array of examples to be added.\r\n     * @param args Input parameters for the LengthBasedExampleSelector.\r\n     * @returns Promise that resolves with a new instance of LengthBasedExampleSelector with the examples added.\r\n     */\r\n    static async fromExamples(examples, args) {\r\n        const selector = new LengthBasedExampleSelector(args);\r\n        await Promise.all(examples.map((eg) => selector.addExample(eg)));\r\n        return selector;\r\n    }\r\n}\r\n", "import { Document } from \"../../document.js\";\r\nimport { BaseExampleSelector } from \"../base.js\";\r\nfunction sortedValues(values) {\r\n    return Object.keys(values)\r\n        .sort()\r\n        .map((key) => values[key]);\r\n}\r\n/**\r\n * Class that selects examples based on semantic similarity. It extends\r\n * the BaseExampleSelector class.\r\n */\r\nexport class SemanticSimilarityExampleSelector extends BaseExampleSelector {\r\n    constructor(data) {\r\n        super(data);\r\n        Object.defineProperty(this, \"vectorStore\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"k\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 4\r\n        });\r\n        Object.defineProperty(this, \"exampleKeys\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"inputKeys\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        this.vectorStore = data.vectorStore;\r\n        this.k = data.k ?? 4;\r\n        this.exampleKeys = data.exampleKeys;\r\n        this.inputKeys = data.inputKeys;\r\n    }\r\n    /**\r\n     * Method that adds a new example to the vectorStore. The example is\r\n     * converted to a string and added to the vectorStore as a document.\r\n     * @param example The example to be added to the vectorStore.\r\n     * @returns Promise that resolves when the example has been added to the vectorStore.\r\n     */\r\n    async addExample(example) {\r\n        const inputKeys = this.inputKeys ?? Object.keys(example);\r\n        const stringExample = sortedValues(inputKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {})).join(\" \");\r\n        await this.vectorStore.addDocuments([\r\n            new Document({\r\n                pageContent: stringExample,\r\n                metadata: { example },\r\n            }),\r\n        ]);\r\n    }\r\n    /**\r\n     * Method that selects which examples to use based on semantic similarity.\r\n     * It performs a similarity search in the vectorStore using the input\r\n     * variables and returns the examples with the highest similarity.\r\n     * @param inputVariables The input variables used for the similarity search.\r\n     * @returns Promise that resolves with an array of the selected examples.\r\n     */\r\n    async selectExamples(inputVariables) {\r\n        const inputKeys = this.inputKeys ?? Object.keys(inputVariables);\r\n        const query = sortedValues(inputKeys.reduce((acc, key) => ({ ...acc, [key]: inputVariables[key] }), {})).join(\" \");\r\n        const exampleDocs = await this.vectorStore.similaritySearch(query, this.k);\r\n        const examples = exampleDocs.map((doc) => doc.metadata);\r\n        if (this.exampleKeys) {\r\n            // If example keys are provided, filter examples to those keys.\r\n            return examples.map((example) => this.exampleKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {}));\r\n        }\r\n        return examples;\r\n    }\r\n    /**\r\n     * Static method that creates a new instance of\r\n     * SemanticSimilarityExampleSelector. It takes a list of examples, an\r\n     * instance of Embeddings, a VectorStore class, and an options object as\r\n     * parameters. It converts the examples to strings, creates a VectorStore\r\n     * from the strings and the embeddings, and returns a new\r\n     * SemanticSimilarityExampleSelector with the created VectorStore and the\r\n     * options provided.\r\n     * @param examples The list of examples to be used.\r\n     * @param embeddings The instance of Embeddings to be used.\r\n     * @param vectorStoreCls The VectorStore class to be used.\r\n     * @param options The options object for the SemanticSimilarityExampleSelector.\r\n     * @returns Promise that resolves with a new instance of SemanticSimilarityExampleSelector.\r\n     */\r\n    static async fromExamples(examples, embeddings, vectorStoreCls, options = {}) {\r\n        const inputKeys = options.inputKeys ?? null;\r\n        const stringExamples = examples.map((example) => sortedValues(inputKeys\r\n            ? inputKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {})\r\n            : example).join(\" \"));\r\n        const vectorStore = await vectorStoreCls.fromTexts(stringExamples, examples, // metadatas\r\n        embeddings, options);\r\n        return new SemanticSimilarityExampleSelector({\r\n            vectorStore,\r\n            k: options.k ?? 4,\r\n            exampleKeys: options.exampleKeys,\r\n            inputKeys: options.inputKeys,\r\n        });\r\n    }\r\n}\r\n", "import { BasePromptTemplate } from \"./base.js\";\r\nimport { ChatPromptTemplate } from \"./chat.js\";\r\n/**\r\n * Class that handles a sequence of prompts, each of which may require\r\n * different input variables. Includes methods for formatting these\r\n * prompts, extracting required input values, and handling partial\r\n * prompts.\r\n */\r\nexport class PipelinePromptTemplate extends BasePromptTemplate {\r\n    static lc_name() {\r\n        return \"PipelinePromptTemplate\";\r\n    }\r\n    constructor(input) {\r\n        super({ ...input, inputVariables: [] });\r\n        Object.defineProperty(this, \"pipelinePrompts\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"finalPrompt\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        this.pipelinePrompts = input.pipelinePrompts;\r\n        this.finalPrompt = input.finalPrompt;\r\n        this.inputVariables = this.computeInputValues();\r\n    }\r\n    /**\r\n     * Computes the input values required by the pipeline prompts.\r\n     * @returns Array of input values required by the pipeline prompts.\r\n     */\r\n    computeInputValues() {\r\n        const intermediateValues = this.pipelinePrompts.map((pipelinePrompt) => pipelinePrompt.name);\r\n        const inputValues = this.pipelinePrompts\r\n            .map((pipelinePrompt) => pipelinePrompt.prompt.inputVariables.filter((inputValue) => !intermediateValues.includes(inputValue)))\r\n            .flat();\r\n        return [...new Set(inputValues)];\r\n    }\r\n    static extractRequiredInputValues(allValues, requiredValueNames) {\r\n        return requiredValueNames.reduce((requiredValues, valueName) => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            requiredValues[valueName] = allValues[valueName];\r\n            return requiredValues;\r\n        }, {});\r\n    }\r\n    /**\r\n     * Formats the pipeline prompts based on the provided input values.\r\n     * @param values Input values to format the pipeline prompts.\r\n     * @returns Promise that resolves with the formatted input values.\r\n     */\r\n    async formatPipelinePrompts(values) {\r\n        const allValues = await this.mergePartialAndUserVariables(values);\r\n        for (const { name: pipelinePromptName, prompt: pipelinePrompt } of this\r\n            .pipelinePrompts) {\r\n            const pipelinePromptInputValues = PipelinePromptTemplate.extractRequiredInputValues(allValues, pipelinePrompt.inputVariables);\r\n            // eslint-disable-next-line no-instanceof/no-instanceof\r\n            if (pipelinePrompt instanceof ChatPromptTemplate) {\r\n                allValues[pipelinePromptName] = await pipelinePrompt.formatMessages(pipelinePromptInputValues);\r\n            }\r\n            else {\r\n                allValues[pipelinePromptName] = await pipelinePrompt.format(pipelinePromptInputValues);\r\n            }\r\n        }\r\n        return PipelinePromptTemplate.extractRequiredInputValues(allValues, this.finalPrompt.inputVariables);\r\n    }\r\n    /**\r\n     * Formats the final prompt value based on the provided input values.\r\n     * @param values Input values to format the final prompt value.\r\n     * @returns Promise that resolves with the formatted final prompt value.\r\n     */\r\n    async formatPromptValue(values) {\r\n        return this.finalPrompt.formatPromptValue(await this.formatPipelinePrompts(values));\r\n    }\r\n    async format(values) {\r\n        return this.finalPrompt.format(await this.formatPipelinePrompts(values));\r\n    }\r\n    /**\r\n     * Handles partial prompts, which are prompts that have been partially\r\n     * filled with input values.\r\n     * @param values Partial input values.\r\n     * @returns Promise that resolves with a new PipelinePromptTemplate instance with updated input variables.\r\n     */\r\n    async partial(values) {\r\n        const promptDict = { ...this };\r\n        promptDict.inputVariables = this.inputVariables.filter((iv) => !(iv in values));\r\n        promptDict.partialVariables = {\r\n            ...(this.partialVariables ?? {}),\r\n            ...values,\r\n        };\r\n        return new PipelinePromptTemplate(promptDict);\r\n    }\r\n    serialize() {\r\n        throw new Error(\"Not implemented.\");\r\n    }\r\n    _getPromptType() {\r\n        return \"pipeline\";\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
