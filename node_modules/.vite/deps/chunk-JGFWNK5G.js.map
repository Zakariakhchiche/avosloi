{
  "version": 3,
  "sources": ["../../langchain/dist/prompts/chat.js"],
  "sourcesContent": ["// Default generic \"any\" values are for backwards compatibility.\r\n// Replace with \"string\" when we are comfortable with a breaking change.\r\nimport { AIMessage, BaseMessage, BasePromptValue, ChatMessage, HumanMessage, SystemMessage, coerceMessageLikeToMessage, isBaseMessage, } from \"../schema/index.js\";\r\nimport { Runnable } from \"../schema/runnable/index.js\";\r\nimport { BasePromptTemplate, } from \"./base.js\";\r\nimport { PromptTemplate } from \"./prompt.js\";\r\n/**\r\n * Abstract class that serves as a base for creating message prompt\r\n * templates. It defines how to format messages for different roles in a\r\n * conversation.\r\n */\r\nexport class BaseMessagePromptTemplate extends Runnable {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"lc_namespace\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: [\"langchain\", \"prompts\", \"chat\"]\r\n        });\r\n        Object.defineProperty(this, \"lc_serializable\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: true\r\n        });\r\n    }\r\n    /**\r\n     * Calls the formatMessages method with the provided input and options.\r\n     * @param input Input for the formatMessages method\r\n     * @param options Optional BaseCallbackConfig\r\n     * @returns Formatted output messages\r\n     */\r\n    async invoke(input, options) {\r\n        return this._callWithConfig((input) => this.formatMessages(input), input, { ...options, runType: \"prompt\" });\r\n    }\r\n}\r\n/**\r\n * Class that represents a chat prompt value. It extends the\r\n * BasePromptValue and includes an array of BaseMessage instances.\r\n */\r\nexport class ChatPromptValue extends BasePromptValue {\r\n    static lc_name() {\r\n        return \"ChatPromptValue\";\r\n    }\r\n    constructor(fields) {\r\n        if (Array.isArray(fields)) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            fields = { messages: fields };\r\n        }\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"lc_namespace\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: [\"langchain\", \"prompts\", \"chat\"]\r\n        });\r\n        Object.defineProperty(this, \"lc_serializable\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: true\r\n        });\r\n        Object.defineProperty(this, \"messages\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        this.messages = fields.messages;\r\n    }\r\n    toString() {\r\n        return JSON.stringify(this.messages);\r\n    }\r\n    toChatMessages() {\r\n        return this.messages;\r\n    }\r\n}\r\n/**\r\n * Class that represents a placeholder for messages in a chat prompt. It\r\n * extends the BaseMessagePromptTemplate.\r\n */\r\nexport class MessagesPlaceholder extends BaseMessagePromptTemplate {\r\n    static lc_name() {\r\n        return \"MessagesPlaceholder\";\r\n    }\r\n    constructor(fields) {\r\n        if (typeof fields === \"string\") {\r\n            // eslint-disable-next-line no-param-reassign\r\n            fields = { variableName: fields };\r\n        }\r\n        super(fields);\r\n        Object.defineProperty(this, \"variableName\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        this.variableName = fields.variableName;\r\n    }\r\n    get inputVariables() {\r\n        return [this.variableName];\r\n    }\r\n    formatMessages(values) {\r\n        return Promise.resolve(values[this.variableName]);\r\n    }\r\n}\r\n/**\r\n * Abstract class that serves as a base for creating message string prompt\r\n * templates. It extends the BaseMessagePromptTemplate.\r\n */\r\nexport class BaseMessageStringPromptTemplate extends BaseMessagePromptTemplate {\r\n    constructor(fields) {\r\n        if (!(\"prompt\" in fields)) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            fields = { prompt: fields };\r\n        }\r\n        super(fields);\r\n        Object.defineProperty(this, \"prompt\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        this.prompt = fields.prompt;\r\n    }\r\n    get inputVariables() {\r\n        return this.prompt.inputVariables;\r\n    }\r\n    async formatMessages(values) {\r\n        return [await this.format(values)];\r\n    }\r\n}\r\n/**\r\n * Abstract class that serves as a base for creating chat prompt\r\n * templates. It extends the BasePromptTemplate.\r\n */\r\nexport class BaseChatPromptTemplate extends BasePromptTemplate {\r\n    constructor(input) {\r\n        super(input);\r\n    }\r\n    async format(values) {\r\n        return (await this.formatPromptValue(values)).toString();\r\n    }\r\n    async formatPromptValue(values) {\r\n        const resultMessages = await this.formatMessages(values);\r\n        return new ChatPromptValue(resultMessages);\r\n    }\r\n}\r\n/**\r\n * Class that represents a chat message prompt template. It extends the\r\n * BaseMessageStringPromptTemplate.\r\n */\r\nexport class ChatMessagePromptTemplate extends BaseMessageStringPromptTemplate {\r\n    static lc_name() {\r\n        return \"ChatMessagePromptTemplate\";\r\n    }\r\n    constructor(fields, role) {\r\n        if (!(\"prompt\" in fields)) {\r\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\r\n            fields = { prompt: fields, role: role };\r\n        }\r\n        super(fields);\r\n        Object.defineProperty(this, \"role\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        this.role = fields.role;\r\n    }\r\n    async format(values) {\r\n        return new ChatMessage(await this.prompt.format(values), this.role);\r\n    }\r\n    static fromTemplate(template, role) {\r\n        return new this(PromptTemplate.fromTemplate(template), role);\r\n    }\r\n}\r\n/**\r\n * Class that represents a human message prompt template. It extends the\r\n * BaseMessageStringPromptTemplate.\r\n */\r\nexport class HumanMessagePromptTemplate extends BaseMessageStringPromptTemplate {\r\n    static lc_name() {\r\n        return \"HumanMessagePromptTemplate\";\r\n    }\r\n    async format(values) {\r\n        return new HumanMessage(await this.prompt.format(values));\r\n    }\r\n    static fromTemplate(template) {\r\n        return new this(PromptTemplate.fromTemplate(template));\r\n    }\r\n}\r\n/**\r\n * Class that represents an AI message prompt template. It extends the\r\n * BaseMessageStringPromptTemplate.\r\n */\r\nexport class AIMessagePromptTemplate extends BaseMessageStringPromptTemplate {\r\n    static lc_name() {\r\n        return \"AIMessagePromptTemplate\";\r\n    }\r\n    async format(values) {\r\n        return new AIMessage(await this.prompt.format(values));\r\n    }\r\n    static fromTemplate(template) {\r\n        return new this(PromptTemplate.fromTemplate(template));\r\n    }\r\n}\r\n/**\r\n * Class that represents a system message prompt template. It extends the\r\n * BaseMessageStringPromptTemplate.\r\n */\r\nexport class SystemMessagePromptTemplate extends BaseMessageStringPromptTemplate {\r\n    static lc_name() {\r\n        return \"SystemMessagePromptTemplate\";\r\n    }\r\n    async format(values) {\r\n        return new SystemMessage(await this.prompt.format(values));\r\n    }\r\n    static fromTemplate(template) {\r\n        return new this(PromptTemplate.fromTemplate(template));\r\n    }\r\n}\r\nfunction _isBaseMessagePromptTemplate(baseMessagePromptTemplateLike) {\r\n    return (typeof baseMessagePromptTemplateLike\r\n        .formatMessages === \"function\");\r\n}\r\nfunction _coerceMessagePromptTemplateLike(messagePromptTemplateLike) {\r\n    if (_isBaseMessagePromptTemplate(messagePromptTemplateLike) ||\r\n        isBaseMessage(messagePromptTemplateLike)) {\r\n        return messagePromptTemplateLike;\r\n    }\r\n    const message = coerceMessageLikeToMessage(messagePromptTemplateLike);\r\n    if (message._getType() === \"human\") {\r\n        return HumanMessagePromptTemplate.fromTemplate(message.content);\r\n    }\r\n    else if (message._getType() === \"ai\") {\r\n        return AIMessagePromptTemplate.fromTemplate(message.content);\r\n    }\r\n    else if (message._getType() === \"system\") {\r\n        return SystemMessagePromptTemplate.fromTemplate(message.content);\r\n    }\r\n    else if (ChatMessage.isInstance(message)) {\r\n        return ChatMessagePromptTemplate.fromTemplate(message.content, message.role);\r\n    }\r\n    else {\r\n        throw new Error(`Could not coerce message prompt template from input. Received message type: \"${message._getType()}\".`);\r\n    }\r\n}\r\n/**\r\n * Class that represents a chat prompt. It extends the\r\n * BaseChatPromptTemplate and uses an array of BaseMessagePromptTemplate\r\n * instances to format a series of messages for a conversation.\r\n */\r\nexport class ChatPromptTemplate extends BaseChatPromptTemplate {\r\n    static lc_name() {\r\n        return \"ChatPromptTemplate\";\r\n    }\r\n    get lc_aliases() {\r\n        return {\r\n            promptMessages: \"messages\",\r\n        };\r\n    }\r\n    constructor(input) {\r\n        super(input);\r\n        Object.defineProperty(this, \"promptMessages\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"validateTemplate\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: true\r\n        });\r\n        Object.assign(this, input);\r\n        if (this.validateTemplate) {\r\n            const inputVariablesMessages = new Set();\r\n            for (const promptMessage of this.promptMessages) {\r\n                // eslint-disable-next-line no-instanceof/no-instanceof\r\n                if (promptMessage instanceof BaseMessage)\r\n                    continue;\r\n                for (const inputVariable of promptMessage.inputVariables) {\r\n                    inputVariablesMessages.add(inputVariable);\r\n                }\r\n            }\r\n            const totalInputVariables = this.inputVariables;\r\n            const inputVariablesInstance = new Set(this.partialVariables\r\n                ? totalInputVariables.concat(Object.keys(this.partialVariables))\r\n                : totalInputVariables);\r\n            const difference = new Set([...inputVariablesInstance].filter((x) => !inputVariablesMessages.has(x)));\r\n            if (difference.size > 0) {\r\n                throw new Error(`Input variables \\`${[\r\n                    ...difference,\r\n                ]}\\` are not used in any of the prompt messages.`);\r\n            }\r\n            const otherDifference = new Set([...inputVariablesMessages].filter((x) => !inputVariablesInstance.has(x)));\r\n            if (otherDifference.size > 0) {\r\n                throw new Error(`Input variables \\`${[\r\n                    ...otherDifference,\r\n                ]}\\` are used in prompt messages but not in the prompt template.`);\r\n            }\r\n        }\r\n    }\r\n    _getPromptType() {\r\n        return \"chat\";\r\n    }\r\n    async formatMessages(values) {\r\n        const allValues = await this.mergePartialAndUserVariables(values);\r\n        let resultMessages = [];\r\n        for (const promptMessage of this.promptMessages) {\r\n            // eslint-disable-next-line no-instanceof/no-instanceof\r\n            if (promptMessage instanceof BaseMessage) {\r\n                resultMessages.push(promptMessage);\r\n            }\r\n            else {\r\n                const inputValues = promptMessage.inputVariables.reduce((acc, inputVariable) => {\r\n                    if (!(inputVariable in allValues)) {\r\n                        throw new Error(`Missing value for input variable \\`${inputVariable.toString()}\\``);\r\n                    }\r\n                    acc[inputVariable] = allValues[inputVariable];\r\n                    return acc;\r\n                }, {});\r\n                const message = await promptMessage.formatMessages(inputValues);\r\n                resultMessages = resultMessages.concat(message);\r\n            }\r\n        }\r\n        return resultMessages;\r\n    }\r\n    async partial(values) {\r\n        // This is implemented in a way it doesn't require making\r\n        // BaseMessagePromptTemplate aware of .partial()\r\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\r\n        const newPartialVariables = {\r\n            ...(this.partialVariables ?? {}),\r\n            ...values,\r\n        };\r\n        const promptDict = {\r\n            ...this,\r\n            inputVariables: newInputVariables,\r\n            partialVariables: newPartialVariables,\r\n        };\r\n        return new ChatPromptTemplate(promptDict);\r\n    }\r\n    /**\r\n     * Create a chat model-specific prompt from individual chat messages\r\n     * or message-like tuples.\r\n     * @param promptMessages Messages to be passed to the chat model\r\n     * @returns A new ChatPromptTemplate\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    static fromMessages(promptMessages) {\r\n        const flattenedMessages = promptMessages.reduce((acc, promptMessage) => acc.concat(\r\n        // eslint-disable-next-line no-instanceof/no-instanceof\r\n        promptMessage instanceof ChatPromptTemplate\r\n            ? promptMessage.promptMessages\r\n            : [_coerceMessagePromptTemplateLike(promptMessage)]), []);\r\n        const flattenedPartialVariables = promptMessages.reduce((acc, promptMessage) => \r\n        // eslint-disable-next-line no-instanceof/no-instanceof\r\n        promptMessage instanceof ChatPromptTemplate\r\n            ? Object.assign(acc, promptMessage.partialVariables)\r\n            : acc, Object.create(null));\r\n        const inputVariables = new Set();\r\n        for (const promptMessage of flattenedMessages) {\r\n            // eslint-disable-next-line no-instanceof/no-instanceof\r\n            if (promptMessage instanceof BaseMessage)\r\n                continue;\r\n            for (const inputVariable of promptMessage.inputVariables) {\r\n                if (inputVariable in flattenedPartialVariables) {\r\n                    continue;\r\n                }\r\n                inputVariables.add(inputVariable);\r\n            }\r\n        }\r\n        return new ChatPromptTemplate({\r\n            inputVariables: [...inputVariables],\r\n            promptMessages: flattenedMessages,\r\n            partialVariables: flattenedPartialVariables,\r\n        });\r\n    }\r\n    /** @deprecated Renamed to .fromMessages */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    static fromPromptMessages(promptMessages) {\r\n        return this.fromMessages(promptMessages);\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["input"]
}
